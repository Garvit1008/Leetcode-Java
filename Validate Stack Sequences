Given two integer arrays pushed and popped each with distinct values, return true if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise.

 

Example 1:

Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
Output: true
Explanation: We might do the following sequence:
push(1), push(2), push(3), push(4),
pop() -> 4,
push(5),
pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1
Example 2:

Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
Output: false
Explanation: 1 cannot be popped before 2.
 

Constraints:

1 <= pushed.length <= 1000
0 <= pushed[i] <= 1000
All the elements of pushed are unique.
popped.length == pushed.length
popped is a permutation of pushed.




//Solution
class stack{
    int s[];
    int temp;
    int maxsize;
    int top;
    stack(int size){
        s = new int[size];
        top = -1;
        maxsize = size;
    }
    public void push(int item){
        if(top==maxsize-1){
            System.out.println("Stack Overflow");
            return;
        }
        s[++top] = item;
    }
    public int pop(){
        if(top==-1){
            System.out.println("Stack Underflow");
            return -1;
        }
        return s[top--];
    }
    public int peek(){
        if(top==-1){
            System.out.println("Stack Underflow");
        }
        return (s[top]);
    }
    public int top(){
        return s[top];
    }

}
class Solution {
     static boolean check(int pushed[],int popped[]){
        stack st  = new stack(pushed.length);
        int j =0;
        for(int i =0;i<pushed.length;i++){
            st.push(pushed[i]);
            while(st.top!=-1 && st.peek()==popped[j]){
                st.pop();
                j++;
            }
        }
        if(st.top==-1){
            return true;
        }
        return false;
    }
    public boolean validateStackSequences(int[] pushed, int[] popped) {
        return check(pushed,popped);
    }
}
